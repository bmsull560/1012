# High-Performance Billing System Docker Compose
# Supports 1M+ events/minute with all optimizations

version: '3.8'

services:
  # ====================
  # Kafka Infrastructure
  # ====================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: billing-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - billing-network

  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: billing-kafka1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_COMPRESSION_TYPE: lz4
      KAFKA_NUM_PARTITIONS: 10
      KAFKA_JMX_PORT: 9999
      KAFKA_HEAP_OPTS: "-Xms2G -Xmx4G"
    volumes:
      - kafka1-data:/var/lib/kafka/data
    networks:
      - billing-network

  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: billing-kafka2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9998
      KAFKA_HEAP_OPTS: "-Xms2G -Xmx4G"
    volumes:
      - kafka2-data:/var/lib/kafka/data
    networks:
      - billing-network

  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: billing-kafka3
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9997
      KAFKA_HEAP_OPTS: "-Xms2G -Xmx4G"
    volumes:
      - kafka3-data:/var/lib/kafka/data
    networks:
      - billing-network

  # ====================
  # Redis Infrastructure
  # ====================
  redis-master:
    image: redis:7-alpine
    container_name: billing-redis-master
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    volumes:
      - ./config/redis-master.conf:/usr/local/etc/redis/redis.conf
      - redis-master-data:/data
    networks:
      - billing-network

  redis-slave1:
    image: redis:7-alpine
    container_name: billing-redis-slave1
    command: redis-server /usr/local/etc/redis/redis.conf --slaveof redis-master 6379
    ports:
      - "6380:6379"
    volumes:
      - ./config/redis-slave.conf:/usr/local/etc/redis/redis.conf
      - redis-slave1-data:/data
    depends_on:
      - redis-master
    networks:
      - billing-network

  redis-slave2:
    image: redis:7-alpine
    container_name: billing-redis-slave2
    command: redis-server /usr/local/etc/redis/redis.conf --slaveof redis-master 6379
    ports:
      - "6381:6379"
    volumes:
      - ./config/redis-slave.conf:/usr/local/etc/redis/redis.conf
      - redis-slave2-data:/data
    depends_on:
      - redis-master
    networks:
      - billing-network

  redis-sentinel1:
    image: redis:7-alpine
    container_name: billing-redis-sentinel1
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    ports:
      - "26379:26379"
    volumes:
      - ./config/sentinel.conf:/usr/local/etc/redis/sentinel.conf
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2
    networks:
      - billing-network

  # ====================
  # Database Shards
  # ====================
  postgres-shard0:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: billing-db-shard0
    environment:
      POSTGRES_DB: billing_shard_0
      POSTGRES_USER: billing
      POSTGRES_PASSWORD: billing_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      TIMESCALEDB_TELEMETRY: "off"
    ports:
      - "5432:5432"
    volumes:
      - ./migrations:/docker-entrypoint-initdb.d
      - postgres-shard0-data:/var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=2GB
      -c effective_cache_size=6GB
      -c maintenance_work_mem=512MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=10MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    networks:
      - billing-network

  postgres-shard1:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: billing-db-shard1
    environment:
      POSTGRES_DB: billing_shard_1
      POSTGRES_USER: billing
      POSTGRES_PASSWORD: billing_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - ./migrations:/docker-entrypoint-initdb.d
      - postgres-shard1-data:/var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=2GB
      -c effective_cache_size=6GB
    networks:
      - billing-network

  postgres-shard2:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: billing-db-shard2
    environment:
      POSTGRES_DB: billing_shard_2
      POSTGRES_USER: billing
      POSTGRES_PASSWORD: billing_password
    ports:
      - "5434:5432"
    volumes:
      - ./migrations:/docker-entrypoint-initdb.d
      - postgres-shard2-data:/var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=2GB
      -c effective_cache_size=6GB
    networks:
      - billing-network

  postgres-shard3:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: billing-db-shard3
    environment:
      POSTGRES_DB: billing_shard_3
      POSTGRES_USER: billing
      POSTGRES_PASSWORD: billing_password
    ports:
      - "5435:5432"
    volumes:
      - ./migrations:/docker-entrypoint-initdb.d
      - postgres-shard3-data:/var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=2GB
      -c effective_cache_size=6GB
    networks:
      - billing-network

  # ====================
  # Application Layer
  # ====================
  billing-api-1:
    build:
      context: ./backend
      dockerfile: Dockerfile.performance
    container_name: billing-api-1
    environment:
      - DATABASE_URL=postgresql+asyncpg://billing:billing_password@postgres-shard0:5432/billing_shard_0
      - REDIS_URL=redis://redis-master:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:29092,kafka2:29093,kafka3:29094
      - WORKERS=4
      - PORT=8000
    ports:
      - "8001:8000"
    depends_on:
      - postgres-shard0
      - redis-master
      - kafka1
    volumes:
      - ./backend:/app
    networks:
      - billing-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  billing-api-2:
    build:
      context: ./backend
      dockerfile: Dockerfile.performance
    container_name: billing-api-2
    environment:
      - DATABASE_URL=postgresql+asyncpg://billing:billing_password@postgres-shard0:5432/billing_shard_0
      - REDIS_URL=redis://redis-master:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:29092,kafka2:29093,kafka3:29094
      - WORKERS=4
      - PORT=8000
    ports:
      - "8002:8000"
    depends_on:
      - postgres-shard0
      - redis-master
      - kafka1
    volumes:
      - ./backend:/app
    networks:
      - billing-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G

  billing-api-3:
    build:
      context: ./backend
      dockerfile: Dockerfile.performance
    container_name: billing-api-3
    environment:
      - DATABASE_URL=postgresql+asyncpg://billing:billing_password@postgres-shard0:5432/billing_shard_0
      - REDIS_URL=redis://redis-master:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:29092,kafka2:29093,kafka3:29094
      - WORKERS=4
    ports:
      - "8003:8000"
    depends_on:
      - postgres-shard0
      - redis-master
      - kafka1
    networks:
      - billing-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G

  # ====================
  # Load Balancer
  # ====================
  nginx:
    image: nginx:alpine
    container_name: billing-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - billing-api-1
      - billing-api-2
      - billing-api-3
    networks:
      - billing-network

  # ====================
  # Monitoring
  # ====================
  prometheus:
    image: prom/prometheus:latest
    container_name: billing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - billing-network

  grafana:
    image: grafana/grafana:latest
    container_name: billing-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - billing-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: billing-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: billing-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29093,kafka3:29094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - billing-network

networks:
  billing-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16

volumes:
  # Kafka volumes
  zookeeper-data:
  zookeeper-logs:
  kafka1-data:
  kafka2-data:
  kafka3-data:
  
  # Redis volumes
  redis-master-data:
  redis-slave1-data:
  redis-slave2-data:
  
  # PostgreSQL volumes
  postgres-shard0-data:
  postgres-shard1-data:
  postgres-shard2-data:
  postgres-shard3-data:
  
  # Monitoring volumes
  prometheus-data:
  grafana-data:
