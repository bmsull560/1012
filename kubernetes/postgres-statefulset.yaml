apiVersion: v1
kind: Service
metadata:
  name: postgres-primary-service
  namespace: valueverse-prod
  labels:
    app: postgres
    role: primary
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
  selector:
    app: postgres
    role: primary

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: valueverse-prod
  labels:
    app: postgres
    role: primary
spec:
  serviceName: postgres-primary-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      role: primary
  template:
    metadata:
      labels:
        app: postgres
        role: primary
    spec:
      initContainers:
        - name: init-postgres
          image: busybox:1.35
          command:
            - sh
            - -c
            - |
              chown -R 999:999 /var/lib/postgresql/data
              chmod 700 /var/lib/postgresql/data
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          securityContext:
            runAsUser: 0
      
      containers:
        - name: postgres
          image: pgvector/pgvector:pg15
          imagePullPolicy: IfNotPresent
          
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: valueverse-config
                  key: DB_NAME
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: valueverse-secrets
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: valueverse-secrets
                  key: DB_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_INITDB_ARGS
              value: "--encoding=UTF8 --locale=en_US.UTF-8"
            # Replication settings
            - name: POSTGRES_WAL_LEVEL
              value: "replica"
            - name: POSTGRES_MAX_WAL_SENDERS
              value: "10"
            - name: POSTGRES_MAX_REPLICATION_SLOTS
              value: "10"
          
          resources:
            requests:
              memory: "2Gi"
              cpu: "1000m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
      
      volumes:
        - name: postgres-config
          configMap:
            name: postgres-config
        - name: postgres-init
          configMap:
            name: postgres-init-scripts
  
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: gp3-encrypted  # AWS EBS gp3 with encryption
        resources:
          requests:
            storage: 100Gi

---
# PostgreSQL Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: valueverse-prod
data:
  postgresql.conf: |
    # Connection Settings
    max_connections = 200
    shared_buffers = 2GB
    effective_cache_size = 6GB
    maintenance_work_mem = 512MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 10485kB
    min_wal_size = 1GB
    max_wal_size = 4GB
    
    # Replication Settings
    wal_level = replica
    max_wal_senders = 10
    max_replication_slots = 10
    hot_standby = on
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_duration = off
    log_lock_waits = on
    log_statement = 'ddl'
    log_temp_files = 0
    
    # Performance
    shared_preload_libraries = 'pg_stat_statements,pgvector'
    pg_stat_statements.track = all

---
# PostgreSQL Init Scripts
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: valueverse-prod
data:
  01-extensions.sql: |
    -- Enable required extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgvector";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";

---
# PostgreSQL Replica
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica-service
  namespace: valueverse-prod
  labels:
    app: postgres
    role: replica
spec:
  type: ClusterIP
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
  selector:
    app: postgres
    role: replica

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: valueverse-prod
  labels:
    app: postgres
    role: replica
spec:
  serviceName: postgres-replica-service
  replicas: 2
  selector:
    matchLabels:
      app: postgres
      role: replica
  template:
    metadata:
      labels:
        app: postgres
        role: replica
    spec:
      initContainers:
        - name: init-replica
          image: pgvector/pgvector:pg15
          command:
            - bash
            - -c
            - |
              if [ ! -f /var/lib/postgresql/data/pgdata/PG_VERSION ]; then
                echo "Initializing replica from primary..."
                PGPASSWORD=$POSTGRES_PASSWORD pg_basebackup \
                  -h postgres-primary-service \
                  -U $POSTGRES_USER \
                  -D /var/lib/postgresql/data/pgdata \
                  -Fp -Xs -R -P
              fi
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: valueverse-secrets
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: valueverse-secrets
                  key: DB_PASSWORD
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      
      containers:
        - name: postgres
          image: pgvector/pgvector:pg15
          
          ports:
            - name: postgres
              containerPort: 5432
          
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: valueverse-secrets
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: valueverse-secrets
                  key: DB_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER
            initialDelaySeconds: 30
            periodSeconds: 10
          
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER
            initialDelaySeconds: 10
            periodSeconds: 5
          
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
  
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: gp3-encrypted
        resources:
          requests:
            storage: 100Gi

---
# PgBouncer for Connection Pooling
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: valueverse-prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      containers:
        - name: pgbouncer
          image: pgbouncer/pgbouncer:latest
          
          ports:
            - name: pgbouncer
              containerPort: 6432
          
          env:
            - name: DATABASES_HOST
              value: "postgres-primary-service"
            - name: DATABASES_PORT
              value: "5432"
            - name: DATABASES_USER
              valueFrom:
                secretKeyRef:
                  name: valueverse-secrets
                  key: DB_USERNAME
            - name: DATABASES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: valueverse-secrets
                  key: DB_PASSWORD
            - name: DATABASES_DBNAME
              valueFrom:
                configMapKeyRef:
                  name: valueverse-config
                  key: DB_NAME
            - name: PGBOUNCER_POOL_MODE
              value: "transaction"
            - name: PGBOUNCER_MAX_CLIENT_CONN
              value: "10000"
            - name: PGBOUNCER_DEFAULT_POOL_SIZE
              value: "25"
            - name: PGBOUNCER_MAX_DB_CONNECTIONS
              value: "100"
          
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          
          livenessProbe:
            tcpSocket:
              port: 6432
            initialDelaySeconds: 10
            periodSeconds: 10
          
          readinessProbe:
            tcpSocket:
              port: 6432
            initialDelaySeconds: 5
            periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer-service
  namespace: valueverse-prod
spec:
  type: ClusterIP
  ports:
    - name: pgbouncer
      port: 6432
      targetPort: 6432
  selector:
    app: pgbouncer
