version: '3.8'

services:
  # PostgreSQL with pgvector
  db:
    image: pgvector/pgvector:pg15
    container_name: valueverse-db
    environment:
      - POSTGRES_USER=valueverse
      - POSTGRES_PASSWORD=valueverse123
      - POSTGRES_DB=valueverse
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - valueverse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U valueverse"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: valueverse-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - valueverse-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: valueverse-backend
    environment:
      DATABASE_URL: postgresql+asyncpg://valueverse:valueverse@postgres:5432/valueverse
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      TOGETHER_API_KEY: ${TOGETHER_API_KEY}
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      DEBUG: ${DEBUG:-false}
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - valueverse-network

  # Celery Worker for Background Tasks
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: valueverse-celery
    environment:
      DATABASE_URL: postgresql+asyncpg://valueverse:valueverse@postgres:5432/valueverse
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      TOGETHER_API_KEY: ${TOGETHER_API_KEY}
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    command: celery -A app.workers.celery_app worker --loglevel=info
    networks:
      - valueverse-network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: valueverse-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: npm run dev
    networks:
      - valueverse-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: valueverse-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - valueverse-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  valueverse-network:
    driver: bridge
