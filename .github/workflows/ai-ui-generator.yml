---
name: AI UI Generator - Multi-Agent Orchestration

"on":
  issues:
    types: [labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      component_name:
        description: 'Component to generate'
        required: true
        type: string
      priority:
        description: 'Priority (critical/high/medium)'
        required: false
        default: 'medium'
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  generate-ui:
    if: contains(github.event.issue.labels.*.name, 'generate-ui') ||
      contains(github.event.comment.body, '/generate-ui')
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
pip install -r requirements.txt

      - name: Parse Issue Request
        id: parse
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number || inputs.issue_number }}
        run: |
          python src/scripts/agents/parse_request.py

      - name: Agent 1 - Design Analyzer
        id: design_analyzer
        env:
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          COMPONENT_NAME: ${{ steps.parse.outputs.component_name }}
        run: |
          echo "üîç Analyzing design specifications..."
          python src/scripts/agents/design_analyzer.py

      - name: Post Design Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysis = JSON.parse(
              fs.readFileSync('output/component_spec.json', 'utf8')
            );

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body:
                `## üîç Design Analysis Complete\n\n` +
                `**Component**: ${analysis.component.name}\n` +
                `**Type**: ${analysis.component.type}\n` +
                `**Priority**: ${analysis.component.priority}\n\n` +
                `**Design Principles**:\n${analysis.design_principles
                  .map(p => `- ${p}`)
                  .join('\n')}\n\n` +
                `Proceeding to architecture planning...`
            });

      - name: Agent 2 - Architecture Planner
        id: architecture_planner
        env:
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
        run: |
          echo "üèóÔ∏è Planning component architecture..."
          python src/scripts/agents/architecture_planner.py

      - name: Agent 3 - Component Generator
        id: component_generator
        env:
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
        run: |
          echo "üíª Generating component code..."
          python src/scripts/agents/component_generator.py

      - name: Agent 4 - Integration Engineer
        id: integration_engineer
        env:
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
        run: |
          echo "üîå Adding API integrations..."
          python src/scripts/agents/integration_engineer.py

      - name: Agent 5 - Quality Reviewer
        id: quality_reviewer
        env:
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
        run: |
          echo "‚úÖ Running quality checks..."
          python src/scripts/agents/quality_reviewer.py

      - name: Validate TypeScript
        run: |
          cd frontend
          npm install
          npx tsc --noEmit || echo "TypeScript validation had warnings"

      - name: Run ESLint
        run: |
          cd frontend
          npx eslint generated_code/ --fix || \
            echo "ESLint found fixable issues"

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          issue_num=$ISSUE_NUMBER
          component_name=$(cat output/component_spec.json | jq -r '.component.name')
          branch="ai-ui-gen-${issue_num}-${component_name}"

          git config user.name "AI UI Generator Bot"
          git config user.email "ai-ui-gen@valueverse.dev"
          git checkout -b "$branch"
          cp -r output/generated_code/* frontend/src/
          git add frontend/src/ output/

          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "feat: AI-gen component - ${component_name}

          Generated by Together.ai orchestration system:
          - Design Analysis: Llama-3.1-70B
          - Architecture Planning: Llama-3.1-8B
          - Component Generation: Llama-3.1-70B
          - Integration Engineering: Llama-3.1-8B
          - Quality Review: Llama-3.1-8B

          Closes #${issue_num}"

          git push origin "$branch"

          quality_report=$(cat output/quality_report.json | jq -r '.overall_score')
          files_generated=$(find output/generated_code -type f | wc -l)

          gh pr create \
            --title "ü§ñ AI-Generated UI: ${component_name}" \
            --body "Generated by Together.ai orchestration.

Files: ${files_generated}
Quality: ${quality_report}/10" \
            --label "ai-generated" \
            --label "needs-review" \
            --label "ui-component"

          pr_url=$(gh pr list --head "$branch" --json url --jq '.[0].url')
          gh issue comment $issue_num --body "## üéâ UI Component Generated!

Your component has been generated by Together.ai system: ${pr_url}

### Quality Score: ${quality_report}/10"
