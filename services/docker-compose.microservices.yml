version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: kong/kong-gateway:3.4
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
    ports:
      - "8000:8000"  # API Gateway port
      - "8001:8001"  # Admin API
    networks:
      - valueverse-network
    depends_on:
      - value-architect
      - value-committer
      - value-executor
      - value-amplifier

  # Value Architect Microservice
  value-architect:
    build:
      context: ./value-architect
      dockerfile: Dockerfile
    image: valueverse/value-architect:latest
    environment:
      SERVICE_PORT: "8001"
      REDIS_URL: "redis://redis:6379"
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/valueverse"
      KAFKA_BROKER: "kafka:9092"
    ports:
      - "8011:8001"
    networks:
      - valueverse-network
    depends_on:
      - redis
      - postgres
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Value Committer Microservice
  value-committer:
    build:
      context: ./value-committer
      dockerfile: Dockerfile
    image: valueverse/value-committer:latest
    environment:
      SERVICE_PORT: "8002"
      REDIS_URL: "redis://redis:6379"
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/valueverse"
      ARCHITECT_SERVICE: "http://value-architect:8001"
    ports:
      - "8012:8002"
    networks:
      - valueverse-network
    depends_on:
      - redis
      - postgres
      - value-architect
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Value Executor Microservice (placeholder)
  value-executor:
    build:
      context: ./value-executor
      dockerfile: Dockerfile
    image: valueverse/value-executor:latest
    environment:
      SERVICE_PORT: "8003"
      REDIS_URL: "redis://redis:6379"
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/valueverse"
    ports:
      - "8013:8003"
    networks:
      - valueverse-network
    depends_on:
      - redis
      - postgres

  # Value Amplifier Microservice (placeholder)
  value-amplifier:
    build:
      context: ./value-amplifier
      dockerfile: Dockerfile
    image: valueverse/value-amplifier:latest
    environment:
      SERVICE_PORT: "8004"
      REDIS_URL: "redis://redis:6379"
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/valueverse"
    ports:
      - "8014:8004"
    networks:
      - valueverse-network
    depends_on:
      - redis
      - postgres

  # Calculation Engine Microservice (scales independently)
  calculation-engine:
    build:
      context: ./calculation-engine
      dockerfile: Dockerfile
    image: valueverse/calculation-engine:latest
    environment:
      SERVICE_PORT: "8005"
      REDIS_URL: "redis://redis:6379"
    ports:
      - "8015:8005"
    networks:
      - valueverse-network
    depends_on:
      - redis
    deploy:
      replicas: 3  # Scale for compute-intensive tasks
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    image: valueverse/notification-service:latest
    environment:
      SERVICE_PORT: "8006"
      REDIS_URL: "redis://redis:6379"
      SMTP_HOST: ${SMTP_HOST:-localhost}
      SMTP_PORT: ${SMTP_PORT:-587}
    ports:
      - "8016:8006"
    networks:
      - valueverse-network
    depends_on:
      - redis

  # Shared Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: valueverse
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - valueverse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - valueverse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Broker (Kafka alternative - using RabbitMQ for simplicity)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - valueverse-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - valueverse-network

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yml
    ports:
      - "3001:3000"
    networks:
      - valueverse-network
    depends_on:
      - prometheus

  # Service Discovery (Consul)
  consul:
    image: consul:latest
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -ui -bootstrap-expect=1 -client=0.0.0.0
    networks:
      - valueverse-network

  # Distributed Tracing (Jaeger)
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - valueverse-network

networks:
  valueverse-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
