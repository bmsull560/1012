version: '3.8'

services:
  # ============================================
  # API Gateway - Kong
  # ============================================
  kong-database:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - valueverse-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong/kong-gateway:3.4
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    networks:
      - valueverse-network
    restart: on-failure

  kong:
    image: kong/kong-gateway:3.4
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_TRACING_INSTRUMENTATIONS: all
      KONG_TRACING_SAMPLING_RATE: 1.0
      KONG_PLUGINS: bundled,zipkin,prometheus
    ports:
      - "8000:8000"  # Proxy port
      - "8443:8443"  # Proxy SSL port
      - "8001:8001"  # Admin API
      - "8444:8444"  # Admin API SSL
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml:ro
      - kong_prefix:/var/run/kong
    networks:
      - valueverse-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Kong Admin UI (Optional - Konga)
  konga:
    image: pantsel/konga:latest
    environment:
      NODE_ENV: production
      TOKEN_SECRET: some-secret-token
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong
      DB_DATABASE: konga
    ports:
      - "1337:1337"
    depends_on:
      - kong
    networks:
      - valueverse-network

  # ============================================
  # Service Discovery - Consul
  # ============================================
  consul:
    image: hashicorp/consul:latest
    command: agent -server -ui -bootstrap-expect=1 -client=0.0.0.0 -config-file=/consul/config/consul.json
    volumes:
      - ./consul/consul.json:/consul/config/consul.json:ro
      - consul_data:/consul/data
    ports:
      - "8500:8500"   # HTTP API & UI
      - "8600:8600"   # DNS
      - "8600:8600/udp"
      - "8501:8501"   # HTTPS API
      - "8502:8502"   # gRPC
    networks:
      - valueverse-network
    environment:
      CONSUL_BIND_INTERFACE: eth0
      CONSUL_CLIENT_INTERFACE: eth0
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Consul Template for dynamic configuration
  consul-template:
    image: hashicorp/consul-template:alpine
    depends_on:
      - consul
    volumes:
      - ./consul/templates:/templates
      - consul_template_data:/data
    command: >
      consul-template
      -consul-addr=consul:8500
      -template="/templates/services.tpl:/data/services.conf"
      -log-level=info
    networks:
      - valueverse-network

  # Registrator - Automatic service registration
  # NOTE: Commented out due to old manifest format issue
  # You can enable manual service registration instead
  # registrator:
  #   image: gliderlabs/registrator:latest
  #   command: -internal consul://consul:8500
  #   volumes:
  #     - /var/run/docker.sock:/tmp/docker.sock
  #   depends_on:
  #     - consul
  #   networks:
  #     - valueverse-network

  # ============================================
  # Distributed Tracing - Jaeger
  # ============================================
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
      COLLECTOR_OTLP_ENABLED: true
      SPAN_STORAGE_TYPE: badger
      BADGER_EPHEMERAL: false
      BADGER_DIRECTORY_VALUE: /badger/data
      BADGER_DIRECTORY_KEY: /badger/key
      METRICS_BACKEND: prometheus
      PROMETHEUS_SERVER_URL: http://prometheus:9090
    ports:
      - "5775:5775/udp"   # Zipkin compact thrift
      - "6831:6831/udp"   # Jaeger compact thrift
      - "6832:6832/udp"   # Jaeger binary thrift
      - "5778:5778"       # Serve configs
      - "16686:16686"     # Jaeger UI
      - "14268:14268"     # Jaeger HTTP collector
      - "14250:14250"     # Jaeger gRPC
      - "9411:9411"       # Zipkin compatible endpoint
      - "14269:14269"     # Prometheus metrics
      - "4317:4317"       # OTLP gRPC
      - "4318:4318"       # OTLP HTTP
    volumes:
      - jaeger_data:/badger
      - ./jaeger/jaeger-config.yaml:/etc/jaeger/config.yaml:ro
    networks:
      - valueverse-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:16686/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Jaeger Query UI (Additional instance for load balancing)
  jaeger-query:
    image: jaegertracing/jaeger-query:latest
    environment:
      SPAN_STORAGE_TYPE: grpc-plugin
      GRPC_STORAGE_SERVER: jaeger:14250
    ports:
      - "16687:16687"
    depends_on:
      - jaeger
    networks:
      - valueverse-network

  # ============================================
  # OpenTelemetry Collector (Optional)
  # ============================================
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4319:4317"   # OTLP gRPC receiver
      - "4320:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check
      - "55679:55679" # ZPages
    depends_on:
      - jaeger
    networks:
      - valueverse-network

  # ============================================
  # Additional Infrastructure Services
  # ============================================
  
  # Service Mesh Proxy (Envoy)
  envoy:
    image: envoyproxy/envoy:v1.27-latest
    command: /usr/local/bin/envoy -c /etc/envoy/envoy.yaml
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml:ro
    ports:
      - "9901:9901"  # Admin interface
      - "10000:10000" # Proxy port
    networks:
      - valueverse-network
    depends_on:
      - consul
      - jaeger

  # Zipkin (Alternative tracing, optional)
  zipkin:
    image: openzipkin/zipkin:latest
    environment:
      STORAGE_TYPE: mem
      JAVA_OPTS: -Xms256m -Xmx512m
    ports:
      - "9412:9411"
    networks:
      - valueverse-network

networks:
  valueverse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  kong_db_data:
  kong_prefix:
  consul_data:
  consul_template_data:
  jaeger_data:
