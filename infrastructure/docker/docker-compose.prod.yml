version: "3.8"

# Production Docker Compose Configuration
# Includes: HA database, Redis, monitoring, load balancing

services:
  # =====================================================
  # DATABASE LAYER
  # =====================================================
  
  # PostgreSQL Primary (with pgvector)
  postgres-primary:
    image: pgvector/pgvector:pg15
    container_name: valueverse-postgres-primary
    environment:
      # Use secrets from environment or AWS Secrets Manager
      POSTGRES_DB: ${DB_NAME:-valueverse}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      # Enable WAL archiving for PITR
      POSTGRES_WAL_LEVEL: replica
      POSTGRES_MAX_WAL_SENDERS: 10
      POSTGRES_MAX_REPLICATION_SLOTS: 10
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./valueverse/backend/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    networks:
      - valueverse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # PostgreSQL Replica (Read-only)
  postgres-replica:
    image: pgvector/pgvector:pg15
    container_name: valueverse-postgres-replica
    environment:
      POSTGRES_DB: ${DB_NAME:-valueverse}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGUSER: ${DB_USERNAME}
      POSTGRES_MASTER_SERVICE_HOST: postgres-primary
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - valueverse-network
    depends_on:
      postgres-primary:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    restart: unless-stopped
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres-primary --port=5432 --username=${DB_USERNAME}
      do
        echo 'Waiting for primary to connect...'
        sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "

  # PgBouncer - Connection Pooling
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: valueverse-pgbouncer
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: ${DB_USERNAME}
      DATABASES_PASSWORD: ${DB_PASSWORD}
      DATABASES_DBNAME: ${DB_NAME:-valueverse}
      PGBOUNCER_POOL_MODE: transaction
      PGBOUNCER_MAX_CLIENT_CONN: 10000
      PGBOUNCER_DEFAULT_POOL_SIZE: 25
      PGBOUNCER_RESERVE_POOL_SIZE: 5
      PGBOUNCER_MAX_DB_CONNECTIONS: 100
    ports:
      - "6432:6432"
    networks:
      - valueverse-network
    depends_on:
      - postgres-primary
    restart: unless-stopped

  # =====================================================
  # CACHE & MESSAGE BROKER
  # =====================================================
  
  # Redis - Session Store & Cache
  redis:
    image: redis:7-alpine
    container_name: valueverse-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - valueverse-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
    restart: unless-stopped

  # Redis Sentinel - HA for Redis
  redis-sentinel:
    image: redis:7-alpine
    container_name: valueverse-redis-sentinel
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./config/sentinel.conf:/etc/redis/sentinel.conf
    networks:
      - valueverse-network
    depends_on:
      - redis
    restart: unless-stopped

  # =====================================================
  # APPLICATION LAYER
  # =====================================================
  
  # Backend API (FastAPI) - Multiple instances for HA
  backend-1:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: production
    container_name: valueverse-backend-1
    command: >
      gunicorn app.main:app
      --workers 4
      --worker-class uvicorn.workers.UvicornWorker
      --bind 0.0.0.0:8000
      --timeout 120
      --keep-alive 5
      --access-logfile -
      --error-logfile -
      --log-level info
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql+asyncpg://${DB_USERNAME}:${DB_PASSWORD}@pgbouncer:6432/${DB_NAME}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      AWS_REGION: ${AWS_REGION:-us-east-1}
      SENTRY_DSN: ${SENTRY_DSN}
    networks:
      - valueverse-network
    depends_on:
      - pgbouncer
      - redis
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NGINX - Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: valueverse-nginx
    volumes:
      - ./config/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - valueverse-network
    depends_on:
      - backend-1
      - frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Frontend (Next.js) - Production Build
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      target: production
    container_name: valueverse-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.valueverse.com
      NEXT_PUBLIC_WS_URL: wss://api.valueverse.com/ws
    networks:
      - valueverse-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
    restart: unless-stopped

  # =====================================================
  # MONITORING & OBSERVABILITY
  # =====================================================
  
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: valueverse-prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus-alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - valueverse-network
    restart: unless-stopped

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: valueverse-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SERVER_ROOT_URL: https://monitoring.valueverse.com
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - valueverse-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: valueverse-loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - valueverse-network
    restart: unless-stopped

  # Promtail - Log Shipper
  promtail:
    image: grafana/promtail:latest
    container_name: valueverse-promtail
    volumes:
      - ./config/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - valueverse-network
    depends_on:
      - loki
    restart: unless-stopped

  # PostgreSQL Exporter - Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: valueverse-postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres-primary:5432/${DB_NAME}?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - valueverse-network
    depends_on:
      - postgres-primary
    restart: unless-stopped

  # Redis Exporter - Cache Metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: valueverse-redis-exporter
    environment:
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "9121:9121"
    networks:
      - valueverse-network
    depends_on:
      - redis
    restart: unless-stopped

  # =====================================================
  # BACKUP & MAINTENANCE
  # =====================================================
  
  # Automated Backup Service
  backup:
    image: prodrigestivill/postgres-backup-local:latest
    container_name: valueverse-backup
    environment:
      POSTGRES_HOST: postgres-primary
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      SCHEDULE: "0 */1 * * *"  # Hourly backups
      BACKUP_KEEP_DAYS: 30
      BACKUP_KEEP_WEEKS: 8
      BACKUP_KEEP_MONTHS: 6
      HEALTHCHECK_PORT: 8080
    volumes:
      - ./backups:/backups
    networks:
      - valueverse-network
    depends_on:
      - postgres-primary
    restart: unless-stopped

# =====================================================
# NETWORKS & VOLUMES
# =====================================================

networks:
  valueverse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_cache:
    driver: local
