# ValueVerse Platform - Makefile
# One-command deployment and management system

.PHONY: help deploy start stop restart clean logs health test build dev prod

# Variables
COMPOSE_FILE := docker-compose.complete.yml
ENV_FILE := .env
PROJECT_NAME := valueverse

# Colors
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m

# Default target
.DEFAULT_GOAL := help

# Help command
help: ## Show this help message
	@echo "$(BLUE)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(BLUE)║          ValueVerse Platform - Management Commands          ║$(NC)"
	@echo "$(BLUE)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(GREEN)Available commands:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(BLUE)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Quick start:$(NC)"
	@echo "  $$ make deploy    # Deploy everything with one command"
	@echo ""

# ============================================================================
# DEPLOYMENT COMMANDS
# ============================================================================

deploy: ## 🚀 Deploy the entire platform (one-command deployment)
	@echo "$(GREEN)Starting ValueVerse deployment...$(NC)"
	@chmod +x deploy.sh
	@./deploy.sh deploy

quick: ## ⚡ Quick deployment (skip builds if images exist)
	@echo "$(GREEN)Quick deployment...$(NC)"
	@docker compose -f $(COMPOSE_FILE) up -d
	@make health

dev: ## 💻 Start in development mode with hot reload
	@echo "$(GREEN)Starting development environment...$(NC)"
	@ENV=development docker compose -f $(COMPOSE_FILE) -f docker-compose.dev.yml up

prod: ## 🏭 Start in production mode
	@echo "$(GREEN)Starting production environment...$(NC)"
	@ENV=production docker compose -f $(COMPOSE_FILE) -f docker-compose.prod.yml up -d

# ============================================================================
# SERVICE MANAGEMENT
# ============================================================================

start: ## ▶️  Start all services
	@echo "$(GREEN)Starting all services...$(NC)"
	@docker compose -f $(COMPOSE_FILE) start
	@make health

stop: ## ⏸️  Stop all services
	@echo "$(YELLOW)Stopping all services...$(NC)"
	@docker compose -f $(COMPOSE_FILE) stop

restart: ## 🔄 Restart all services
	@echo "$(YELLOW)Restarting all services...$(NC)"
	@docker compose -f $(COMPOSE_FILE) restart
	@sleep 5
	@make health

down: ## ⏹️  Stop and remove all containers
	@echo "$(RED)Stopping and removing all containers...$(NC)"
	@docker compose -f $(COMPOSE_FILE) down

clean: ## 🧹 Clean everything (containers, volumes, images)
	@echo "$(RED)Cleaning everything...$(NC)"
	@docker compose -f $(COMPOSE_FILE) down -v --rmi all
	@docker system prune -af
	@echo "$(GREEN)Clean complete!$(NC)"

# ============================================================================
# BUILD COMMANDS
# ============================================================================

build: ## 🔨 Build all Docker images
	@echo "$(GREEN)Building all images...$(NC)"
	@docker compose -f $(COMPOSE_FILE) build --parallel

build-nocache: ## 🔨 Build all images without cache
	@echo "$(GREEN)Building all images (no cache)...$(NC)"
	@docker compose -f $(COMPOSE_FILE) build --no-cache --parallel

rebuild: ## 🔄 Rebuild and restart services
	@make build
	@make restart

# ============================================================================
# SERVICE-SPECIFIC COMMANDS
# ============================================================================

frontend: ## 🎨 Start only frontend
	@docker compose -f $(COMPOSE_FILE) up -d frontend

backend: ## ⚙️  Start only backend services
	@docker compose -f $(COMPOSE_FILE) up -d value-architect value-committer value-executor value-amplifier

infra: ## 🏗️  Start only infrastructure services
	@docker compose -f $(COMPOSE_FILE) up -d postgres redis rabbitmq kong consul jaeger prometheus grafana

db: ## 💾 Start only databases
	@docker compose -f $(COMPOSE_FILE) up -d postgres redis

monitoring: ## 📊 Start monitoring stack
	@docker compose -f $(COMPOSE_FILE) up -d prometheus grafana jaeger

# ============================================================================
# DATABASE COMMANDS
# ============================================================================

migrate: ## 📦 Run database migrations
	@echo "$(GREEN)Running migrations...$(NC)"
	@docker exec -i valueverse-postgres psql -U postgres -d valueverse < scripts/migrate.sql || true

seed: ## 🌱 Seed database with sample data
	@echo "$(GREEN)Seeding database...$(NC)"
	@docker exec -i valueverse-postgres psql -U postgres -d valueverse < scripts/seed-data.sql || true

db-reset: ## 🔄 Reset database
	@echo "$(RED)Resetting database...$(NC)"
	@docker compose -f $(COMPOSE_FILE) stop postgres
	@docker compose -f $(COMPOSE_FILE) rm -f postgres
	@docker volume rm $(PROJECT_NAME)_postgres_data || true
	@docker compose -f $(COMPOSE_FILE) up -d postgres
	@sleep 10
	@make migrate
	@make seed

db-backup: ## 💾 Backup database
	@echo "$(GREEN)Backing up database...$(NC)"
	@mkdir -p backups
	@docker exec valueverse-postgres pg_dump -U postgres valueverse > backups/backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)Backup completed!$(NC)"

db-restore: ## 📥 Restore database from backup
	@echo "$(GREEN)Restoring database...$(NC)"
	@docker exec -i valueverse-postgres psql -U postgres valueverse < $(file)

# ============================================================================
# MONITORING & DEBUGGING
# ============================================================================

logs: ## 📜 View logs for all services
	@docker compose -f $(COMPOSE_FILE) logs -f

log: ## 📜 View logs for specific service (usage: make log service=frontend)
	@docker compose -f $(COMPOSE_FILE) logs -f $(service)

health: ## 🏥 Health check all services
	@echo "$(GREEN)Health Check Report:$(NC)"
	@echo "===================="
	@curl -sf http://localhost:8011/health > /dev/null 2>&1 && echo "✅ Value Architect" || echo "❌ Value Architect"
	@curl -sf http://localhost:8012/health > /dev/null 2>&1 && echo "✅ Value Committer" || echo "❌ Value Committer"
	@curl -sf http://localhost:8013/health > /dev/null 2>&1 && echo "✅ Value Executor" || echo "❌ Value Executor"
	@curl -sf http://localhost:8014/health > /dev/null 2>&1 && echo "✅ Value Amplifier" || echo "❌ Value Amplifier"
	@curl -sf http://localhost:3000 > /dev/null 2>&1 && echo "✅ Frontend" || echo "❌ Frontend"
	@curl -sf http://localhost:8000 > /dev/null 2>&1 && echo "✅ Kong Gateway" || echo "❌ Kong Gateway"
	@curl -sf http://localhost:8500 > /dev/null 2>&1 && echo "✅ Consul" || echo "❌ Consul"
	@curl -sf http://localhost:16686 > /dev/null 2>&1 && echo "✅ Jaeger" || echo "❌ Jaeger"
	@curl -sf http://localhost:3001 > /dev/null 2>&1 && echo "✅ Grafana" || echo "❌ Grafana"
	@curl -sf http://localhost:9090 > /dev/null 2>&1 && echo "✅ Prometheus" || echo "❌ Prometheus"

ps: ## 🔍 Show running containers
	@docker compose -f $(COMPOSE_FILE) ps

stats: ## 📊 Show container statistics
	@docker stats --no-stream

exec: ## 💻 Execute command in container (usage: make exec service=frontend cmd=sh)
	@docker compose -f $(COMPOSE_FILE) exec $(service) $(cmd)

shell: ## 🐚 Open shell in container (usage: make shell service=frontend)
	@docker compose -f $(COMPOSE_FILE) exec $(service) sh

# ============================================================================
# TESTING COMMANDS
# ============================================================================

test: ## 🧪 Run all tests
	@echo "$(GREEN)Running all tests...$(NC)"
	@make test-unit
	@make test-integration
	@make test-e2e

test-unit: ## 🧪 Run unit tests
	@echo "$(GREEN)Running unit tests...$(NC)"
	@docker compose -f $(COMPOSE_FILE) exec frontend npm test
	@docker compose -f $(COMPOSE_FILE) exec value-architect pytest tests/unit

test-integration: ## 🧪 Run integration tests
	@echo "$(GREEN)Running integration tests...$(NC)"
	@docker compose -f $(COMPOSE_FILE) exec frontend npm run test:integration
	@docker compose -f $(COMPOSE_FILE) exec value-architect pytest tests/integration

test-e2e: ## 🧪 Run end-to-end tests
	@echo "$(GREEN)Running E2E tests...$(NC)"
	@docker compose -f $(COMPOSE_FILE) exec frontend npm run test:e2e

# ============================================================================
# DEVELOPMENT TOOLS
# ============================================================================

lint: ## 🔍 Run linters
	@echo "$(GREEN)Running linters...$(NC)"
	@docker compose -f $(COMPOSE_FILE) exec frontend npm run lint
	@docker compose -f $(COMPOSE_FILE) exec value-architect pylint app

format: ## 💅 Format code
	@echo "$(GREEN)Formatting code...$(NC)"
	@docker compose -f $(COMPOSE_FILE) exec frontend npm run format
	@docker compose -f $(COMPOSE_FILE) exec value-architect black .

validate: ## ✅ Validate configuration files
	@echo "$(GREEN)Validating configurations...$(NC)"
	@docker compose -f $(COMPOSE_FILE) config > /dev/null
	@echo "✅ Docker Compose configuration is valid"

# ============================================================================
# UTILITY COMMANDS
# ============================================================================

urls: ## 🌐 Show all service URLs
	@echo "$(BLUE)Service URLs:$(NC)"
	@echo "============="
	@echo "Frontend:          http://localhost:3000"
	@echo "API Gateway:       http://localhost:8000"
	@echo "Kong Admin:        http://localhost:8001"
	@echo "Consul UI:         http://localhost:8500"
	@echo "Jaeger UI:         http://localhost:16686"
	@echo "Grafana:           http://localhost:3001 (admin/admin)"
	@echo "Prometheus:        http://localhost:9090"
	@echo "RabbitMQ:          http://localhost:15672 (admin/admin)"
	@echo ""
	@echo "$(BLUE)API Endpoints:$(NC)"
	@echo "Value Models:      http://localhost:8000/api/v1/value-models"
	@echo "Commitments:       http://localhost:8000/api/v1/commitments"
	@echo "Executions:        http://localhost:8000/api/v1/executions"
	@echo "Amplifications:    http://localhost:8000/api/v1/amplifications"

env: ## 🔧 Show environment variables
	@cat $(ENV_FILE) 2>/dev/null || echo "No .env file found"

setup: ## 🔧 Initial setup
	@echo "$(GREEN)Running initial setup...$(NC)"
	@cp -n .env.example $(ENV_FILE) 2>/dev/null || true
	@mkdir -p logs data scripts backups
	@echo "$(GREEN)Setup complete!$(NC)"

update: ## 📦 Update dependencies
	@echo "$(GREEN)Updating dependencies...$(NC)"
	@docker compose -f $(COMPOSE_FILE) exec frontend npm update
	@docker compose -f $(COMPOSE_FILE) exec value-architect pip install --upgrade -r requirements.txt

backup: ## 💾 Backup entire system
	@echo "$(GREEN)Creating full backup...$(NC)"
	@mkdir -p backups
	@tar -czf backups/valueverse_backup_$$(date +%Y%m%d_%H%M%S).tar.gz \
		--exclude='node_modules' \
		--exclude='.next' \
		--exclude='__pycache__' \
		--exclude='*.pyc' \
		.
	@make db-backup
	@echo "$(GREEN)Backup complete!$(NC)"

version: ## ℹ️  Show version information
	@echo "$(BLUE)ValueVerse Platform$(NC)"
	@echo "=================="
	@echo "Docker:         $$(docker --version)"
	@echo "Docker Compose: $$(docker compose version)"
	@echo "Platform:       v1.0.0"

# ============================================================================
# ADVANCED COMMANDS
# ============================================================================

scale: ## 📈 Scale service (usage: make scale service=value-architect replicas=3)
	@docker compose -f $(COMPOSE_FILE) up -d --scale $(service)=$(replicas) $(service)

performance: ## ⚡ Run performance tests
	@echo "$(GREEN)Running performance tests...$(NC)"
	@docker run --rm -v $$(pwd)/tests/performance:/scripts \
		-e TARGET_URL=http://host.docker.internal:8000 \
		loadimpact/k6 run /scripts/load-test.js

security-scan: ## 🔒 Run security scan
	@echo "$(GREEN)Running security scan...$(NC)"
	@docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		aquasec/trivy image valueverse/frontend:latest

# ============================================================================
# ALIASES
# ============================================================================

d: deploy
s: start
r: restart
l: logs
h: health
c: clean

# Default target when just running 'make'
all: deploy
